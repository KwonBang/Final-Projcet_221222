/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.83
 * Generated at: 2022-11-18 06:37:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import hmshopVO.BoardVO;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("hmshopVO.BoardVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/shopping.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"wrap\" align=\"center\">\r\n");
      out.write("		<h1>게시글 등록</h1>\r\n");
      out.write("		<form name=\"frm\" method=\"get\" action=\"insert_servlet\" id=\"form\">\r\n");
      out.write("			<input type=\"hidden\" name=\"command\" value=\"board_write\">\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>글번호</th>\r\n");
      out.write("					");

						BoardVO boardVO = (BoardVO) request.getAttribute("no");
						out.print("<td>" + boardVO.getNum() + "<input type='hidden' value='" + boardVO.getNum()
								+ "' name='num'></td>");
					
      out.write("\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>아이디</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"id\" required minlength=\"8\"\r\n");
      out.write("						id=\"id\"> * 필수</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>작성자</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"name\" required id=\"name\">\r\n");
      out.write("						* 필수</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀번호</th>\r\n");
      out.write("					<td><input type=\"password\" name=\"pass\" required id=\"pass\">\r\n");
      out.write("						* 필수 (게시물 수정 삭제시 필요합니다.)</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>제목</th>\r\n");
      out.write("					<td><input type=\"text\" size=\"70\" name=\"title\" id=\"title\">\r\n");
      out.write("						* 필수</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>내용</th>\r\n");
      out.write("					<td><textarea cols=\"70\" rows=\"15\" name=\"content\"></textarea></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>비밀글 여부</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"radio\" name=\"chkbox\" value=\"Y\" onclick=\"radio()\">비밀글O\r\n");
      out.write("						<input type=\"radio\" name=\"chkbox\" value=\"N\" onclick=\"radio()\">비밀글X\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("			<br> <br> <input type=\"button\" value=\"등록\" onclick=\"chk()\">\r\n");
      out.write("			<input type=\"reset\" value=\"다시 작성\"> <input type=\"button\"\r\n");
      out.write("				value=\"목록\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("	var select = 0;\r\n");
      out.write("	var check = /[~!@#$%^&*()_+|<>?:{}]/;\r\n");
      out.write("	var form = document.getElementById('form');\r\n");
      out.write("	var id = document.getElementById('id');\r\n");
      out.write("	var nname = document.getElementById('name');\r\n");
      out.write("	var pass = document.getElementById('pass');\r\n");
      out.write("	var title = document.getElementById('title');\r\n");
      out.write("	radio = () => {\r\n");
      out.write("		select++;\r\n");
      out.write("	}\r\n");
      out.write("	chk = () => {\r\n");
      out.write("		if(id.value.length>=8){\r\n");
      out.write("			if(check.test(id.value)){\r\n");
      out.write("                if(!nname.value==\"\"){\r\n");
      out.write("                    if(!pass.value==\"\"){\r\n");
      out.write("                        if(!title.value==\"\"){\r\n");
      out.write("                            if(select>0){\r\n");
      out.write("                            	select=0;\r\n");
      out.write("                                form.submit();\r\n");
      out.write("                            }else{\r\n");
      out.write("                                alert('비밀글 여부를 선택하세요.');\r\n");
      out.write("                            }\r\n");
      out.write("                        }else{\r\n");
      out.write("                            alert('제목을 입력하세요.');\r\n");
      out.write("                        }\r\n");
      out.write("                    }else{\r\n");
      out.write("                        alert('비밀번호를 하세요.');\r\n");
      out.write("                    }\r\n");
      out.write("                }else{\r\n");
      out.write("                    alert('이름을 입력하세요.');\r\n");
      out.write("                }\r\n");
      out.write("            }else{\r\n");
      out.write("                alert('아이디는 특수문자 1개이상 포함하세요.');\r\n");
      out.write("            }\r\n");
      out.write("		}else{\r\n");
      out.write("            alert('아이디는 8글자 이상 입력하세요.');\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
